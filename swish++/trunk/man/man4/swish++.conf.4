.\"
.\"	SWISH++
.\"	swish++.conf.4
.\"
.\"	Copyright (C) 1998  Paul J. Lucas
.\"
.\"	This program is free software; you can redistribute it and/or modify
.\"	it under the terms of the GNU General Public License as published by
.\"	the Free Software Foundation; either version 2 of the License, or
.\"	(at your option) any later version.
.\" 
.\"	This program is distributed in the hope that it will be useful,
.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"	GNU General Public License for more details.
.\" 
.\"	You should have received a copy of the GNU General Public License
.\"	along with this program; if not, write to the Free Software
.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.\" ---------------------------------------------------------------------------
.\" define code-start macro
.de cS
.sp
.nf
.RS 5
.ft CW
.ta .5i 1i 1.5i 2i 2.5i 3i 3.5i 4i 4.5i 5i 5.5i
..
.\" define code-end macro
.de cE
.ft 1
.RE
.fi
.sp
..
.\" ---------------------------------------------------------------------------
.TH \f3swish++.conf\f1 4 "September 23, 1999" "SWISH++"
.SH NAME
swish++.conf \- SWISH++ configuration file format
.SH DESCRIPTION
The configuration file format used by SWISH++ consists of three types of lines:
comments, blank lines, and variable definitions.
.SS Comments
Comments start with the \f(CW#\f1 character
and continue up to and including the end of the line.
While leading whitespace is permitted,
.BR "comments are treated as such only if they are on lines by themselves" .
.SS Blank lines
Blank lines, or lines consisting entirely of whitespace, are ignored.
.SS Variable definitions
Variable definition lines are of the form:
.cS
.ft 2
variable_name argument(s)
.cE
where
.I variable_name
is a member of one of the types described in the remaining sections, and
.I argument(s)
are specific to every variable name.
.SS Boolean variables
Variables of this type take one argument that must be one of:
\f(CWf\f1,
\f(CWfalse\f1,
\f(CWn\f1,
\f(CWno\f1,
\f(CWoff\f1,
\f(CWon\f1,
\f(CWt\f1,
\f(CWtrue\f1,
\f(CWy\f1,
or
\f(CWyes\f1.
Case is irrelevant.
Variables of this type are:
.BR RecurseSubdirs ,
.BR SearchDaemon ,
and
.BR StemWords .
.SS Integer variables
Variables of this type take one numeric argument.
A special string of ``infinity'' is taken to mean
``the largest possible integer value.''
Case is irrelevant.
Variables of this type are:
.BR ResultsMax ,
.BR SocketQueueSize ,
.BR SocketTimeout ,
.BR ThreadsMax ,
.BR ThreadsMin ,
.BR ThreadTimeout ,
.BR TitleLines ,
.BR Verbosity ,
.BR WordFilesMax ,
and
.BR WordPercentMax .
.SS String variables
Variables of this type take one argument that is the remainder of the line
minus leading and trailing whitespace.
Variables of this type are:
.BR IndexFile ,
.BR SocketFile ,
and
.BR StopWordFile .
.SS Set variables
Variables of this type take one or more arguments separated by whitespace.
Variables of this type are:
.BR ExcludeClass ,
.BR IncludeExtension ,
.BR ExcludeExtension ,
.BR IncludeMeta ,
and
.BR ExcludeMeta .
.SS Other variables
Variables of this type are:
.B FilterExtension
(see FILTERS below).
.SH FILTERS
Via the
.H FilterExtension
configuration file variable,
files having particular extensions can be filtered
prior to indexing or extraction.
A
.B FilterExtension
configuration file line is of the form:
.cS
FilterExtension \f2extension command\fP
.cE
where
.I extension
is the filename extension (without the dot) and
.I command
is the command-line to execute the filter.
.PP
Within a command,
there are a few % or @ substitutions that are substituted at run-time:
.PP
.RS 5
.PD 0
.TP 5
.B E
Filename with last extension deleted.
.TP
.B e
Extension of filename.
.TP
.B f
Entire filename.
.RE
.PD
.PP
The @ substitution is used to indicate which filename is the target
or product of the filter.
There must be exactly one @ substitution.
This file is subsequently deleted after indexing or extraction.
A file can be filtered more than once prior to indexing or extraction, i.e.,
filters can be ``chained'' together.
.PP
Note, however, that just because a filename has an extension
for which a filter has been specified
does not mean that a file will be filtered
and subsequently indexed or extracted.
When
.B index
or
.B extract
encounteres a file having an extension for which a filter has been specified,
it performs the filename substitution(s) on it first
to determine what the target filename would be.
If the extension of
.I that
filename should be indexed or extracted
(because it is among the set of extensions specified with either the
.B \-e
option or the
.B IncludeExtension
variable
or is not among the set specified with either the
.B \-E
option or the
.B ExcludeExtension
variable),
then the filter(s) are executed to create it.
(See the EXAMPLES.)
.SH EXAMPLES
.SS Filters
To uncompress \f(CWgzip\f1'd and \f(CWcompress\f1'd files
prior to indexing or extraction, the
.B FilterExtension
variable lines in a configuration file would be:
.cS
FilterExtension gz   gunzip -c %f > @E
FilterExtension Z    uncompress -c %f > @E
.cE
Given that, a filename such as \f(CWfoo.txt.gz\f1 would become \f(CWfoo.txt\f1.
If files having \f(CWtxt\f1 extensions should be indexed, then it will be.
Note that the command on the
.B FilterExtension
line must
.I not
simply be:
.cS
gunzip @f
.cE
because \f(CWgunzip\f1 will
.I replace
the compressed file with the uncompressed one.
.PP
Here's an example to convert PDF to plain text for indexing using the
.BR xpdf (1)
package's \f(CWpdftotext\f1 command:
.cS
FilterExtension pdf  pdftotext %f @E.txt
.cE
Not that if used in conjunction with the uncompression filters above,
then compressed PDF files will also be indexed, i.e.,
filenames ending with wither a \f(CW.pdf.gz\f1 or \f(CW.pdf.Z\f1
double extension.
.SH SEE ALSO
.BR compress (1),
.BR extract (1),
.BR gunzip (1),
.BR gzip (1),
.BR index (1),
.BR pdftotext (1),
.BR search (1),
.BR uncompress (1)
.SH AUTHOR
Paul J. Lucas
.RI < pjl@best.com >
