.\"
.\"	SWISH++
.\"	search.1
.\"
.\"	Copyright (C) 1998  Paul J. Lucas
.\"
.\"	This program is free software; you can redistribute it and/or modify
.\"	it under the terms of the GNU General Public License as published by
.\"	the Free Software Foundation; either version 2 of the License, or
.\"	(at your option) any later version.
.\" 
.\"	This program is distributed in the hope that it will be useful,
.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"	GNU General Public License for more details.
.\" 
.\"	You should have received a copy of the GNU General Public License
.\"	along with this program; if not, write to the Free Software
.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.\" ---------------------------------------------------------------------------
.\" define code-start macro
.de cS
.sp
.nf
.RS 5
.ft CW
.ta .5i 1i 1.5i 2i 2.5i 3i 3.5i 4i 4.5i 5i 5.5i
..
.\" define code-end macro
.de cE
.ft 1
.RE
.fi
.sp
..
.\" ---------------------------------------------------------------------------
.TH \f3search\fP 1 "February 12, 2000" "SWISH++"
.SH NAME
search \- SWISH++ searcher
.SH SYNOPSIS
.B search
[
.I options
]
.I query
.SH DESCRIPTION
.B search
is the SWISH++ searcher.
It searches a previously generated index for the words specified in a query.
In addition to running from the command-line,
it can run in the background as a daemon process
functioning as a ``search server.''
.SS Query Input
The formal grammar of a query is:
.ft 2
.RS 5
.TP 16
query:
query optional_relop meta
.br
meta
.TP
meta:
meta_name \f(CW=\fP primary
.br
primary
.TP
meta_name:
word
.TP
primary:
\f(CW(\fP query \f(CW)\fP
.br
\f(CWnot\fP
primary
.br
word
.br
word\f(CW*\fP
.TP
optional_relop:
\f(CWand\fP
.br
\f(CWor\fP
.br
(empty)
.RE
.ft 1
.PP
In practice, however, the query is the set of words sought after,
possibly restricted to meta data,
and possibly combined with the Boolean operators
``\f(CWand\fP,''
``\f(CWor\fP,''
and
``\f(CWnot\fP.''
The asterisk (\f(CW*\fP) can be used as a wildcard character
at the end of words.
Queries are evaluated in left-to-right order, i.e.,
``\f(CWand\fP'' has the same precedence as ``\f(CWor\fP.''
See the EXAMPLES.
.SS Character Mapping and Word Determination
The same character mapping and word determination heuristics used by
.BR index (1)
are used on queries prior to searching.
.SS Results Output
The results are output in the format of:
.cS
.I rank path-name file-size file-title
.cE
where
.I rank
is an integer from from 1 to 100.
The
.I path-name
is relative to where the set of files was originally indexed.
If the file is an HTML file, then
.I file-title
is its title;
otherwise, it is its filename.
A results line can be parsed easily in Perl with:
.cS
($rank,$path,$size,$title) = split( / /, $_, 4 );
.cE
In addition to results lines, comment lines may also appear
containing additional information about the query results.
Comment lines are in the format of:
.cS
# \f2comment-key\fP: \f2comment-value\fP
.cE
The
.I comment-keys
are:
.RS 5
.TP 25
\f3ignored\fP: \f2stop-words\fP
The list of stop-words (separated by spaces) ignored in the query.
.TP
\f3not found\fP: \f2word\fP
The word was not found in the index.
.TP
\f3results\fP: \f2result-count\fP
The total number of results.
.RE
.SS Running as a Daemon Process
.B search
can alternatively run in the background as a daemon process
(via either the
.BR \-b
or
.BR \-\-daemon
options or the
.BR SearchDaemon
variable)
functioning as a ``search server''
by listening to a Unix domain socket file
(specified by either the
.BR \-u
or
.BR \-\-socket-file
options or the
.B SocketFile
variable).
For search-intensive applications,
such as a search engine on a heavily used web site,
this can yield a large performance improvement
since the start-up cost
.RB ( fork (2),
.BR exec (2),
and initialization)
is paid only once.
.PP
Search clients connect to a daemon via a socket
and send a query in the same manner as on the command line
(including the first word being ``\f(CWsearch\f1'').
The only exception is that shell meta-characters must
.B not
be escaped (backslashed) since no shell is involved.
Search results are returned via the same socket.
See the EXAMPLES.
.PP
A single daemon can search only a single index.
To be able to search multiple indicies concurrently,
multiple daemons can be run,
each searching its own index and using its own socket file.
An index must
.B not
be modified or deleted while a daemon is using it.
.PP
A daemon can serve multiple query requests simultaneously
since it is multi-threaded.
When started,
it ``pre-threads'' meaning that it creates a pool of threads in advance
that service an indefinite numer of requests
as a further performance improvement
since a thread is not created and destroyed per request.
.PP
There is an initial, minimum number of threads in the thread pool.
The number of threads grows dynamically
when there are more requests than threads,
but not more than a specified maximum
to prevent the server from thrashing.
(See the
.BR \-t ,
.BR \-\-min-threads ,
.BR \-T ,
and
.B \-\-max-threads
options or the
.B ThreadsMin
or
.B ThreadsMax
variables.)
If the number of threads reaches the maximum,
subsequent requests are queued until existing threads become available
to service them after completing in-progress requests.
(See either the
.B \-q
or
.B \-\-queue-size
options or the
.B SocketQueueSize
variable.)
.PP
If there are more than the minimum number of threads
and some remain idle longer than a specified timeout period
(because the number of requests per unit time has dropped),
then threads will die off until the pool returns to its original minimum size.
(See either the
.B \-O
or
.B \-\-thread-timeout
options or the
.B ThreadTimeout
variable.)
.SH OPTIONS
Options begin with either a `\f(CW-\f1' for short options
or a ``\f(CW--\f1'' for long options.
Either a `\f(CW-\f1' or ``\f(CW--\f1'' by itself explicitly ends the options;
however, the difference is that `\f(CW-\f1' is returned as the first non-option
whereas ``\f(CW--\f1'' is skipped entirely.
Either short or long options may be used.
Long option names may be abbreviated
so long as the abbreviation is unambiguous.
.PP
For a short option that takes an argument,
the argument is either taken to be the remaining characters of the same option,
if any, or, if not, is taken from the next option unless said option begins
with a `\f(CW-\f1'.
.PP
Short options that take no arguments can be grouped
(but the last option in the group can take an argument), e.g.,
\f(CW-lrv4\fP
is equivalent to
\f(CW-l -r -v4\fP.
.PP
For a long option that takes an argument,
the argument is either taken to be the characters after a `\f(CW=\fP', if any,
or, if not, is taken from the next option unless said option begins with
a `\f(CW-\fP'.
.TP 20
.B \-?
.br
.ns
.TP
.B \-\-help
Print the usage (``help'') message and exit.
.TP
.B \-b
.br
.ns
.TP
.B \-\-daemon
Run in the background as a daemon process.
(Default is not to.)
If executed from the command-line,
.B search
appears to return immediately;
however, it has merely put itself into the background
and detached from the terminal.
There is no need to follow the command with an `\f(CW&\f1'.
.TP
.BI \-c f
.br
.ns
.TP
.BI \-\-config-file= f
The name of the configuration file,
.IR f ,
to use.
(Default is \f(CWswish++.conf\f1 in the current directory.)
A configuration file is not required:
if none is specified and the default does not exist, none is used;
however, if one is specified and it does not exist, then this is an error.
.TP
.B \-d
.br
.ns
.TP
.B \-\-dump-words
Dump the query word indices to standard output and exit.
Wildcards are not permitted.
.TP
.B \-D
.br
.ns
.TP
.B \-\-dump-index
Dump the entire word index to standard output and exit.
.TP
.BI \-f n
.br
.ns
.TP
.BI \-\-word-files= n
The maximum number of files,
.IR n ,
a word may occur in before it is discarded as being too frequent.
(Default is infinity.)
.TP
.BI \-i f
.br
.ns
.TP
.BI \-\-index-file= f
The name of the index file,
.IR f ,
to use.
(Default is \f(CWswish++.index\fP in the current directory.)
.TP
.BI \-m n
.br
.ns
.TP
.BI \-\-max-results= n
The maximum number of results,
.IR n ,
to return.
(Default is 100.)
.TP
.B \-M
.br
.ns
.TP
.B \-\-dump-meta
Dump the meta-name index to standard output and exit.
.TP
.BI \-o s
.br
.ns
.TP
.BI \-\-socket-timeout= s
The number of seconds,
.IR s ,
a search client has to complete a query request
before the socket connection is closed.
(Default is 10.)
This is to prevent a client from connecting, not completing a request,
and causing the thread servicing the request to wait forever.
.TP
.BI \-O s
.br
.ns
.TP
.BI \-\-thread-timeout= s
The number of seconds,
.IR s ,
until an idle spare thread dies while running as a daemon.
(Default is 30.)
.TP
.BI \-q n
.br
.ns
.TP
.BI \-\-queue-size= n
The maximum number of socket connections to queue.
(Default is 100.)
.TP
.BI \-r n
.br
.ns
.TP
.BI \-\-skip-results= n
The initial number of results,
.IR n ,
to skip.
(Default is 0.)
Used in conjunction with
.B \-m
or
.BR \-\-max-results ,
results can be returned in ``pages.''
.TP
.BI \-p n
.br
.ns
.TP
.BI \-\-word-percent= n
The maximum percentage,
.IR n ,
of files a word may occur in before it is discarded as being too frequent.
(Default is 100.)
If you want to keep all words regardless, specify 101.
.TP
.B \-s
.br
.ns
.TP
.B \-\-stem-words
Perform stemming (suffix stripping) on words during the search.
Words that end in the wildcard character are not stemmed.
(Default is no.)
.TP
.B \-S
.br
.ns
.TP
.B \-\-dump-stop
Dump the stop-word index to standard output and exit.
.TP
.BI \-t n
.br
.ns
.TP
.BI \-\-min-threads= n
Minimum number of threads to maintain while running as a daemon.
.TP
.BI \-T n
.br
.ns
.TP
.BI \-\-max-threads= n
Maximum number of threads to allow while running as a daemon.
.TP
.BI \-u f
.br
.ns
.TP
.BI \-\-socket-file= f
The name of the Unix domain socket file to use while running as a daemon.
.TP
.B \-V
.br
.ns
.TP
.B \-\-version
Print the version number of
.B SWISH++
to standard output and exit.
.TP
\f3\-w\fP\f2n\fP[,\f2c\fP]
.br
.ns
.TP
\f3\-\-window=\fP\f2n\fP[,\f2c\fP]
Dump a ``window'' of at most
.I n
lines around each query word matching
.I c
characters.
Wildcards are not permitted.
(Default for
.I c
is 0.)
Every window ends with a blank line.
.SH CONFIGURATION FILE
The following variables can be set in a configuration file.
Variables and command-line options can be mixed,
the latter taking priority.
.PP
.RS 5
.PD 0
.TP 20
.B IndexFile
Same as
.B \-i
or
.B \-\-index-file
.TP
.B ResultsMax
Same as
.B \-m
or
.B \-\-max-results
.TP
.B SearchDaemon
Same as
.B \-b
or
.B \-\-daemon
.TP
.B SocketFile
Same as
.B \-u
or
.B \-\-socket-file
.TP
.B SocketQueueSize
Same as
.B \-q
or
.B \-\-queue-size
.TP
.B SocketTimeout
Same as
.B \-o
or
.B \-\-socket-timeout
.TP
.B StemWords
Same as
.B \-s
or
.B \-\-stem-words
.TP
.B ThreadsMax
Same as
.B \-T
or
.B \-\-max-threads
.TP
.B ThreadsMin
Same as
.B \-t
or
.B \-\-min-threads
.TP
.B ThreadTimeout
Same as
.B \-O
or
.B \-\-thread-timeout
.TP
.B WordFilesMax
Same as
.B \-f
or
.B \-\-word-files
.TP
.B WordPercentMax
Same as
.B \-p
or
.B \-\-word-percent
.PD
.RE
.SH EXAMPLES
.SS Simple Queries
The query:
.cS
librar*
.cE
will return all documents that contain
``library,'' ``libraries,'' or ``librarian.''
The query:
.cS
mouse and computer
.cE
will return only those documents
regarding the kind of mice attached to a computer and not the rodents.
The query:
.cS
cat or kitten or feline
.cE
will return only those documents regarding cats.
The query:
.cS
mouse or mice and not computer
.cE
will return only those documents regarding mice (the rodents)
and not the kind attached to a computer. 
The query:
.cS
mouse and computer or keyboard
.cE
is the same as:
.cS
(mouse and computer) or keyboard
.cE
in that they will both return only those documents
regarding either mice attached to a computer or any kind of keyboard.
However, neither of those is the same as:
.cS
mouse and (computer or keyboard)
.cE
that will return only those documents regarding mice
and either a computer or a keyboard. 
.SS Queries Using Meta Data
The query:
.cS
author = carroll
.cE
will return only those HTML documents
whose author attribute contains ``carroll.''
The query:
.cS
author = stevenson treasure
.cE
will return only those HTML documents
whose author attribute contains ``stevenson'' and also regarding treasure.
The query:
.cS
author = (lewis carroll)
.cE
will return only those HTML documents whose author is Lewis Carroll.
The query:
.cS
author = (lewis carroll) or wonderland
.cE
will return only those HTML documents whose author is Lewis Carroll
or that contain the word ``wonderland'' anywhere in the document
regardless of the author.
.SS Sending Queries to a Search Daemon
To send a query request to a search daemon using Perl,
first open the socket and connect to the daemon
(see [Wall], p. 353):
.cS
use Socket;

$SocketFile = '/tmp/swish++.socket';
socket( SEARCH, PF_UNIX, SOCK_STREAM, 0 ) or
	die "can not open socket: $!\\n";
connect( SEARCH, sockaddr_un( $SocketFile ) ) or
	die "can not connect to \\"$SocketFile\\": $!\\n";
.cE
Autoflush
.B must
be set for the socket filehandle
(see [Wall], p. 130, 211),
otherwise the server thread will hang
since I/O buffering will wait for the buffer to fill
that will never happen since queries are short:
.cS
my $old_fh = select( SEARCH ); $| = 1; select( $old_fh );
.cE
Next, send a query request
(beginning with the word ``search'')
to the daemon via the socket filehandle
making sure to include a trailing newline
since the server reads an entire line of input
(so therefore it looks and waits for a newline):
.cS
$query = 'mouse and computer';
print SEARCH "search $query\\n";
.cE
Finally, read the results back and print them:
.cS
print while <SEARCH>;
close( SEARCH );
.cE
.SH EXIT STATUS
Exits with one of the values given below:
.PP
.RS 5
.PD 0
.TP 5
0
Success.
.TP
1
Error in configuration file.
.TP
2
Error in command-line options.
.TP
40
Unable to read index file.
.TP
50
Malformed query.
.TP
51
Could not open socket file.
.TP
52
Could not
.BR unlink (2)
socket file.
.TP
53
Could not
.BR bind (3)
to socket.
.TP
54
Could not
.BR listen (3)
to socket.
.TP
55
Could not
.BR accept (3)
a socket connection.
.TP
56
Could not
.BR fork (2)
child process.
.TP
57
Could not change directory to \f(CW/\f1.
.TP
58
Could not create thread.
.TP
59
Could not detach thread.
.PD
.RE
.SH CAVEATS
.TP 4
1.
Stemming can be done
.B only
when searching through and index of files that are in English
because the Porter stemming algorithm used only stems English words.
.TP
2.
When run as a daemon,
.B search
can presently listen only to a Unix domain socket file
and not to an Internet domain socket
to serve queries from remote machines.
This would require lots of additional code to provide security features
(domain or IP address restrictions)
so that everybody on the Internet wouldn't have the ability to search
your indices.
Such code may be added in a future version.
.SH FILES
.PD 0
.TP 20
\f(CWswish++.conf\f1
default configuration file name
.TP
\f(CWswish++.index\f1
default index file name
.PD
.SH SEE ALSO
.BR index (1),
.BR perlfunc (1),
.BR exec (2),
.BR fork (2),
.BR unlink (2),
.BR accept (3),
.BR bind (3),
.BR listen (3),
.BR swish++.conf (4)
.PP
Bradford Nichols, Dick Buttlar, and Jacqueline Proulx Farrell.
.I Pthreads Programming,
O'Reilly & Associates, Sebestabol, CA,
1996.
.PP
M.F. Porter.
``An Algorithm For Suffix Stripping,''
.I Program,
14(3),
July 1980,
pp. 130-137.
.PP
W. Richard Stevens.
.I Unix Network Programming, Vol 1, 2nd ed.
Prentice-Hall, Upper Saddle River, NJ,
1998.
.PP
Larry Wall, et al.
.I Programming Perl, 2nd ed.,
O'Reilly & Associates, Inc., Sebastopol, CA,
1996.
.SH AUTHOR
Paul J. Lucas
.RI < pjl@best.com >
